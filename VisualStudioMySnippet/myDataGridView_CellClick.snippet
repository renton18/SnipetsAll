<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets
    xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <Title>CellClick</Title>
      <Shortcut>myDataGridView</Shortcut>
    </Header>
    <Snippet>
      <Code Language="cSharp">
        <![CDATA[
            #region スルー
            //列のスルー
            if (new int[] { deletedButtunPos, selectedPos }.Contains(e.ColumnIndex) == false)
            {
                return;
            }
            //指定列のセル値でスルーする
            if (senderGrid.CurrentRow.Cells[""].Value.ToString().Trim() == "0") return;
            if (senderGrid.CurrentRow.Cells[""].Value.ToString().Trim() == "1") return;
            #endregion
            ////////////////////////////////////////////////////////////////////////////////
            // レコードクリック　詳細表示
            ////////////////////////////////////////////////////////////////////////////////
            #region  レコードクリック　詳細表示
            var itemCd = senderGrid.CurrentRow.Cells[""].Value.ToString().Trim(); //項目CD
            if (itemCd == "")
            {
                var sql = "";
                iTEMBindingSource.DataSource = SQLSERVERHelper.Search(sql, COMMON.NIBSConnecttion);
            }
            #endregion
            ////////////////////////////////////////////////////////////////////////////////
            // 削除ボタンクリック
            ////////////////////////////////////////////////////////////////////////////////
            #region 削除ボタンクリック
            if (senderGrid.Columns[e.ColumnIndex].DataPropertyName == "IsDeleted")
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // ①論理削除 DB反映なし 背景色変更
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                DataGridViewButtonCell buttonCell = (DataGridViewButtonCell)senderGrid[e.ColumnIndex, e.RowIndex];
                var buttonCellValue = buttonCell.FormattedValue.ToString().Trim();
                buttonCell.UseColumnTextForButtonValue = false;
                buttonCell.Value = buttonCellValue.ToString() == "削除" ? "1" : "0";
                //削除時は修正フラグを立てる
                //削除ボタンが変更された場合、IsEditに1を設定する。この修正フラグは確定ボタンを押すときに使用する
                if (senderGrid[editPos, e.RowIndex].Value == null)
                {
                    senderGrid[editPos, e.RowIndex].Value = 1;
                }
                else
                {
                    senderGrid[editPos, e.RowIndex].Value = senderGrid[editPos, e.RowIndex].Value.ToString().Trim() == "1" ? "0" : "1";
                }
                senderGrid.CurrentRow.DefaultCellStyle.BackColor = senderGrid.CurrentRow.DefaultCellStyle.SelectionBackColor = buttonCellValue.ToString() == "削除" ? Color.White : Color.Gray;
                senderGrid.CurrentRow.DefaultCellStyle.ForeColor = senderGrid.CurrentRow.DefaultCellStyle.SelectionForeColor = buttonCellValue.ToString() == "削除" ? Color.Black : Color.White;
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // ②論理削除 DB反映なし
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                rECORDBindingSource.RemoveCurrent();
                return;
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // ③物理削除 DB反映あり
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////
                DialogResult result = MessageBox.Show("削除してもいいですか？", "確認", MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button2);
                if (result == DialogResult.No) return;
                var seq = senderGrid.CurrentRow.Cells[""].Value.ToString().Trim();
                
                #region 削除
                string sql = "";
                string loginUser = "NoLoginUser";
                try
                {
                    SQLSERVERHelper.Log("0", "", "【開始】", "", loginUser);
                    #region sql
                    sql = "";
                    #endregion
                    SQLSERVERHelper.Delete(sql, COMMON.TRUSTConnection, loginUser);
                    SQLSERVERHelper.Log("0", "", "【完了】", "", loginUser);
                }
                catch (Exception ex)
                {
                    SQLSERVERHelper.Log("1", ex.Message + (ex.InnerException == null ? "" : Environment.NewLine + ex.InnerException.Message), "【エラー中断】", sql, loginUser);
                    MessageBox.Show("エラーが発生しました：" + Environment.NewLine + ex.Message + (ex.InnerException == null ? "" : Environment.NewLine + ex.InnerException.Message));
                    return;
                }
                #endregion
                
                // DGV表示更新
                reportItemBindingSource.RemoveCurrent();
                }
            #endregion
            ////////////////////////////////////////////////////////////////////////////////
            // 選択チェックボックスON/OFF
            ////////////////////////////////////////////////////////////////////////////////
            #region 選択チェックボックスON/OFF
            if (senderGrid.Columns[e.ColumnIndex].DataPropertyName == "IsSelected")
            {
                DataGridViewCheckBoxCell cbCell = (DataGridViewCheckBoxCell)senderGrid[selectedPos, e.RowIndex];
                if (cbCell.Value == null)
                {
                    cbCell.Value = true;
                }
                else
                {
                    cbCell.Value = cbCell.Value.ToString() == "true" ? "false" : "true";
                }
            }
            #endregion
            //データグリッドビューの状態をDatatableに保存する
            senderGrid.EndEdit();
            ((DataRowView)senderGrid.CurrentRow.DataBoundItem).EndEdit();
            //DGV表示更新
            sendDt = SQLSERVERHelper.InitDGV(dtpAddS.Value.ToString("yyyy/MM/dd"), COMMON.TRUSTConnection);
            sEND_ITEMBindingSource.DataSource = sendDt;]]>
      </Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>
